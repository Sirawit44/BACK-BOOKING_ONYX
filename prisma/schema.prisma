generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int             @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String          @unique
  password        String
  phone           String          @unique
  createdAt       DateTime        @default(now()) @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @db.Timestamp(0)
  role            CustomerOrAdmin @default(CUSTOMERS)
  reserves        Reservation[]
}

model Reservation {
  id              Int             @id @default(autoincrement())
  userId          Int
  roomId          Int             @unique
  checkInDate     DateTime?       @db.Timestamp(0)
  checkOutDate    DateTime?       @db.Timestamp(0)
  totalPrice      String
  bookingDate     DateTime        @default(now()) @db.Timestamp(0)
  isDelete        Boolean         @default(false)

  user            Users           @relation(fields: [userId], references: [id])
  room            Room            @relation(fields: [roomId], references: [id])
  payments        Payments[]
}

model Room {
  id              Int             @id @default(autoincrement())
  roomTypeId      Int
  roomNumber      String
  branchId        Int
  availableRoom   RoomStatus      @default(TRUE)

  roomType        RoomType        @relation(fields: [roomTypeId], references: [id])
  reservations    Reservation[]
  branch          Branch          @relation(fields: [branchId], references: [id])
}

model RoomType {
  id              Int             @id @default(autoincrement())
  typeName        String          @unique
  area            String
  pricePerDay     String
  typeDescription String?
  imageType       String?

  rooms           Room[]
}

model Branch {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  roomAmount      Int
  contactNumber   String
  location        String
  imageHeader     String?
  imageMap        String?

  rooms           Room[]
}

model Payments {
  id              Int             @id @default(autoincrement())
  paymentDate     DateTime        @default(now()) @db.Timestamp(0)
  imageSlip       String
  reservationId   Int             @unique
  paymentStatus   PaymentStatus   @default(PENDING)

  reservation     Reservation     @relation(fields: [reservationId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
}

enum CustomerOrAdmin {
  CUSTOMERS
  ADMIN
}

enum RoomStatus {
  TRUE
  FALSE
}
